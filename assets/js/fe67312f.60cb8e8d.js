"use strict";(self.webpackChunkbeta_BNB_Docs=self.webpackChunkbeta_BNB_Docs||[]).push([[210],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>h});var r=n(67294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var s=r.createContext({}),p=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},d=function(e){var t=p(e.components);return r.createElement(s.Provider,{value:t},e.children)},u="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,a=e.originalType,s=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),u=p(n),m=i,h=u["".concat(s,".").concat(m)]||u[m]||c[m]||a;return n?r.createElement(h,o(o({ref:t},d),{},{components:n})):r.createElement(h,o({ref:t},d))}));function h(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var a=n.length,o=new Array(a);o[0]=m;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[u]="string"==typeof e?e:i,o[1]=l;for(var p=2;p<a;p++)o[p]=n[p];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},81627:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>c,frontMatter:()=>a,metadata:()=>l,toc:()=>p});var r=n(87462),i=(n(67294),n(3905));const a={},o="Integration Guide for Builder",l={unversionedId:"mev/builder-integration",id:"mev/builder-integration",title:"Integration Guide for Builder",description:"The Builder API Specification",source:"@site/docs/mev/builder-integration.md",sourceDirName:"mev",slug:"/mev/builder-integration",permalink:"/docs/mev/builder-integration",draft:!1,editUrl:"https://github.com/bnb-chain/bnb-chain.github.io/blob/master/docs/mev/builder-integration.md",tags:[],version:"current",frontMatter:{},sidebar:"bscSideBar",previous:{title:"Integration Guide for Validator",permalink:"/docs/mev/validator-integration"},next:{title:"FAQs",permalink:"/docs/mev/faqs"}},s={},p=[{value:"Customize Builder",id:"customize-builder",level:2},{value:"Setup with Example Builder",id:"setup-with-example-builder",level:2}],d={toc:p},u="wrapper";function c(e){let{components:t,...n}=e;return(0,i.kt)(u,(0,r.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"integration-guide-for-builder"},"Integration Guide for Builder"),(0,i.kt)("p",null,"The ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/bnb-chain/BEPs/blob/master/BEPs/BEP322.md"},"Builder API Specification"),"\ndefines the standard interface that builders should implement, while the\nspecific implementation is left open to MEV API providers. The BNB Chain\ncommunity offers a simple ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/bnb-chain/bsc-builder"},"implementation example")," for\nreference."),(0,i.kt)("h2",{id:"customize-builder"},"Customize Builder"),(0,i.kt)("p",null,"Although the builder offers great flexibility, there are still some\nessential standards that must be followed:"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"The builder needs to set up a ",(0,i.kt)("strong",{parentName:"p"},"builder account"),", which is used to\nsign the block bid and receive fees. The builder can ask for a tip\n(builder fee) on the block that it sends to the sentry. If the\nblock is finally selected, the ",(0,i.kt)("strong",{parentName:"p"},"builder account")," will receive\nthe tip.")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"The builder needs to implement the ",(0,i.kt)("strong",{parentName:"p"},"mev_reportIssue")," API to\nreceive the errors report from validators.")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"In order to prevent transaction leakage, the builder can only send\nblock bids to the in-turn validator.")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"At most 3 block bids are allowed to be sent at the same height from\nthe same builder."))),(0,i.kt)("p",null,"Here are some sentry APIs that may interest a builder:"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"mev_bestBidGasFee"),". It will return the current most profitable\nreward that the validator received among all the blocks received\nfrom all builders. The reward is calculated as: ",(0,i.kt)("strong",{parentName:"p"},"gasFee","*","(1 -\ncommissionRate) - tipToBuilder"),". A builder may compare the\n",(0,i.kt)("strong",{parentName:"p"},"bestBidGasFee")," with a local one and then decide to send the\nblock bid or not.")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"mev_params.")," It will return the\n",(0,i.kt)("strong",{parentName:"p"},"BidSimulationLeftOver"),",",(0,i.kt)("strong",{parentName:"p"},"ValidatorCommission"),", ",(0,i.kt)("strong",{parentName:"p"},"GasCeil")," and\n",(0,i.kt)("strong",{parentName:"p"},"BidFeeCeil")," settings on the validator. If the current time is\nafter ",(0,i.kt)("strong",{parentName:"p"},"(except block time - BidSimulationLeftOver)"),", then there\nis no need to send block bids any more; ",(0,i.kt)("strong",{parentName:"p"},"ValidatorCommission"),"\nand ",(0,i.kt)("strong",{parentName:"p"},"BidFeeCeil")," helps the builder to build its fee charge\nstrategy. The ",(0,i.kt)("strong",{parentName:"p"},"GasCeil")," helps a builder know when to stop adding\nmore transactions."))),(0,i.kt)("p",null,"Builders have the freedom to define various aspects like pricing models\nfor users, creating intuitive APIs, and define the bundle verification\nrules."),(0,i.kt)("h2",{id:"setup-with-example-builder"},"Setup with Example Builder"),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Step 1: Find Validator Information")),(0,i.kt)("p",null,"For validators that open MEV integration, the public information is\nshown at ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/bnb-chain/bsc-mev-info"},"bsc-mev-info"),".\nBuilders can also provide information here to the validator."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Step 2: Set up Builder.")),(0,i.kt)("p",null,"The builder must sign the bid using an account, such as the etherbase\naccount specified in the config.toml file."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-toml"},'[Eth.Miner.Mev]\nBuilderEnabled = true # open bid sending\nBuilderAccount = "0x..." # builder address which signs bid, usually it is the same as etherbase address\n')),(0,i.kt)("p",null,"Configure the validator node list, including the address of the\nvalidator and the public URL. The public URL refers to the sentry\nservice."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-toml"},'[[Eth.Miner.Mev.Validators]]\nAddress = "0x23707D3D...6455B52B3"\nURL = "https://bsc-fuji.io"\n\n[[Eth.Miner.Mev.Validators]]\nAddress = "0x52825922...3A1A7A422"\nURL = "http://bsc-mathwallet.io"\n')),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Step 3: Publish information")),(0,i.kt)("p",null,"It is highly recommended to publish information in ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/bnb-chain/bsc-mev-info"},"bsc-mev-info"),"."))}c.isMDXComponent=!0}}]);