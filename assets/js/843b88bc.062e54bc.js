"use strict";(self.webpackChunkbeta_BNB_Docs=self.webpackChunkbeta_BNB_Docs||[]).push([[5687],{3905:(e,n,t)=>{t.d(n,{Zo:()=>d,kt:()=>k});var a=t(67294);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function l(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function s(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?l(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):l(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function o(e,n){if(null==e)return{};var t,a,i=function(e,n){if(null==e)return{};var t,a,i={},l=Object.keys(e);for(a=0;a<l.length;a++)t=l[a],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)t=l[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var r=a.createContext({}),p=function(e){var n=a.useContext(r),t=n;return e&&(t="function"==typeof e?e(n):s(s({},n),e)),t},d=function(e){var n=p(e.components);return a.createElement(r.Provider,{value:n},e.children)},m="mdxType",u={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},c=a.forwardRef((function(e,n){var t=e.components,i=e.mdxType,l=e.originalType,r=e.parentName,d=o(e,["components","mdxType","originalType","parentName"]),m=p(t),c=i,k=m["".concat(r,".").concat(c)]||m[c]||u[c]||l;return t?a.createElement(k,s(s({ref:n},d),{},{components:t})):a.createElement(k,s({ref:n},d))}));function k(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var l=t.length,s=new Array(l);s[0]=c;var o={};for(var r in n)hasOwnProperty.call(n,r)&&(o[r]=n[r]);o.originalType=e,o[m]="string"==typeof e?e:i,s[1]=o;for(var p=2;p<l;p++)s[p]=t[p];return a.createElement.apply(null,s)}return a.createElement.apply(null,t)}c.displayName="MDXCreateElement"},6767:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>r,contentTitle:()=>s,default:()=>u,frontMatter:()=>l,metadata:()=>o,toc:()=>p});var a=t(87462),i=(t(67294),t(3905));const l={id:"genesis",title:"Genesis File",hide_table_of_contents:!1,sidebar_position:2},s=void 0,o={unversionedId:"beaconchain/learn/genesis",id:"beaconchain/learn/genesis",title:"Genesis File",description:"What is a Genesis File",source:"@site/docs/beaconchain/learn/genesis.md",sourceDirName:"beaconchain/learn",slug:"/beaconchain/learn/genesis",permalink:"/bnbchain-docsite/docs/beaconchain/learn/genesis",draft:!1,editUrl:"https://github.com/bnb-chain/bnb-chain.github.io/blob/master/docs/beaconchain/learn/genesis.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{id:"genesis",title:"Genesis File",hide_table_of_contents:!1,sidebar_position:2},sidebar:"bscSideBar",previous:{title:"Transactions",permalink:"/bnbchain-docsite/docs/beaconchain/learn/transactions"},next:{title:"Signatures",permalink:"/bnbchain-docsite/docs/beaconchain/learn/signature"}},r={},p=[{value:"What is a Genesis File",id:"what-is-a-genesis-file",level:2},{value:"Content of Genesis File",id:"content-of-genesis-file",level:2},{value:"Genesis Time",id:"genesis-time",level:3},{value:"Chain Id",id:"chain-id",level:3},{value:"Consensus Parameters",id:"consensus-parameters",level:3},{value:"Application State",id:"application-state",level:3},{value:"Genesis Accounts",id:"genesis-accounts",level:4},{value:"Token",id:"token",level:4},{value:"Staking",id:"staking",level:4},{value:"Governance",id:"governance",level:4},{value:"Genesis Transactions",id:"genesis-transactions",level:4},{value:"How to Generate Geneis File",id:"how-to-generate-geneis-file",level:2}],d={toc:p},m="wrapper";function u(e){let{components:n,...t}=e;return(0,i.kt)(m,(0,a.Z)({},d,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h2",{id:"what-is-a-genesis-file"},"What is a Genesis File"),(0,i.kt)("p",null,"A genesis file is a JSON file which defines the initial state of your blockchain. It can be seen as height ",(0,i.kt)("inlineCode",{parentName:"p"},"0")," of your\nblockchain. The first block, at height ",(0,i.kt)("inlineCode",{parentName:"p"},"1"),", will reference the genesis file as its parent."),(0,i.kt)("p",null,"The state defined in the genesis file contains all the necessary information, like initial token allocation, genesis\ntime, default parameters, and more. Let us break down these information."),(0,i.kt)("h2",{id:"content-of-genesis-file"},"Content of Genesis File"),(0,i.kt)("p",null,"For BNB Beacon Chain, the geneis files for mainnet and testnet can be\nfound ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/bnb-chain/node/tree/master/asset"},"here"),". Some key contents will be explained as follows."),(0,i.kt)("h3",{id:"genesis-time"},"Genesis Time"),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"genesis_time")," is defined at the top of the genesis file. It is a ",(0,i.kt)("inlineCode",{parentName:"p"},"UTC")," timestamp which specifies when the\nblockchain is due to start. At this time, genesis validators are supposed to come online and start participating in the\nconsensus process. The blockchain starts when more than 2/3rd of the genesis validators (weighted by voting power) are\nonline."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'"genesis_time": "2019-04-18T05:59:26.228734998Z"\n')),(0,i.kt)("h3",{id:"chain-id"},"Chain Id"),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"chain_id")," is a unique identifier for your chain. It helps differentiate between different chains using the same\nversion of the software."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'"chain_id": "Binance-Chain-Tigris",\n')),(0,i.kt)("h3",{id:"consensus-parameters"},"Consensus Parameters"),(0,i.kt)("p",null,"Next, the genesis file defines consensus parameters. Consensus parameters regroup all the parameters that are related to\nthe consensus layer, which is ",(0,i.kt)("inlineCode",{parentName:"p"},"Tendermint")," in the case of ",(0,i.kt)("inlineCode",{parentName:"p"},"BNB Beacon Chain"),". Let us look at these parameters:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"block_size")),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"max_bytes"),": Maximum number of bytes per block is 1048576."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"max_gas"),": Gas limit per block. As gas is not used to calculate transaction fees at the moment. The limit. is set\nto ",(0,i.kt)("inlineCode",{parentName:"li"},"-1"),"."))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"evidence")),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"max_age"),": An evidence is a proof that a validator signed two different blocks at the same height (and round).\nThis is an explicitly malicious behaviour that is punished at the state-machine level. The ",(0,i.kt)("inlineCode",{parentName:"li"},"max_age")," defines the\nmaximum number of ",(0,i.kt)("strong",{parentName:"li"},"blocks")," after which an evidence is not valid anymore."))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"validator")),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"pub_key_types"),": Currently only ",(0,i.kt)("inlineCode",{parentName:"li"},"ed25519")," is accepted for validators.")))),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-json"},'"consensus_params": {\n    "block_size": {\n        "max_bytes": "1048576",\n        "max_gas": "-1"\n    },\n    "evidence": {\n      "max_age": "100000"\n    },\n    "validator": {\n        "pub_key_types": [\n          "ed25519"\n        ]\n    }\n}\n')),(0,i.kt)("h3",{id:"application-state"},"Application State"),(0,i.kt)("p",null,"The application state defines the initial state of the state-machine."),(0,i.kt)("h4",{id:"genesis-accounts"},"Genesis Accounts"),(0,i.kt)("p",null,"In the ",(0,i.kt)("inlineCode",{parentName:"p"},"accounts")," section (under the ",(0,i.kt)("inlineCode",{parentName:"p"},"app_state"),"), initial allocation of tokens is defined. It is possible to add\naccounts manually by directly editing the genesis file, but it is also possible to edit the balance after genesis file\nis created."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-json"},'[\n  {\n    "name": "Aconcagua",\n    "address": "bnb1y888axmhzz6yjj464syfy68mkhzy9phlv8fzac",\n    "consensus_addr": ""\n  },\n  {\n    "name": "Aconcagua",\n    "address": "bnb1kdx4xkktr35j2mpxncvtsshswj5gq577me7lx4",\n    "consensus_addr": "A71E5CD078B8C5C7B1AF88BCE84DD70B0557D93E"\n  }\n]\n')),(0,i.kt)("p",null,"You can see the three different address of all ",(0,i.kt)("strong",{parentName:"p"},"11")," validators. Let us break down these addresses:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"The first address ",(0,i.kt)("inlineCode",{parentName:"li"},"bnb1y888axmhzz6yjj464syfy68mkhzy9phlv8fzac")," is used to receive rewards after chain launched. At\ngenesis block, according to ",(0,i.kt)("inlineCode",{parentName:"li"},"gentx")," info, same amount of staking tokens will be allocated to this address."),(0,i.kt)("li",{parentName:"ul"},"The second address ",(0,i.kt)("inlineCode",{parentName:"li"},"bnb1kdx4xkktr35j2mpxncvtsshswj5gq577me7lx4")," is used for governance."),(0,i.kt)("li",{parentName:"ul"},"The third address ",(0,i.kt)("inlineCode",{parentName:"li"},"A71E5CD078B8C5C7B1AF88BCE84DD70B0557D93E")," is used as consensus address for signing new blocks")),(0,i.kt)("h4",{id:"token"},"Token"),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"tokens")," module handles tokens, which contains the information of BNB Beacon Chain native token ",(0,i.kt)("inlineCode",{parentName:"p"},"BNB"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-json"},'"tokens": [\n    {\n        "name": "BNB Chain Native Token",\n        "symbol": "BNB",\n        "total_supply": "20000000000000000",\n        "owner": "bnb1ultyhpw2p2ktvr68swz56570lgj2rdsadq3ym2",\n        "mintable": false\n    }\n]\n')),(0,i.kt)("h4",{id:"staking"},"Staking"),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"staking")," module handles the bulk of the Proof-of-Stake logic of the state-machine. This section should look like\nthe following:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-json"},'"stake": {\n    "pool": {\n        "loose_tokens": "20000000000000000",\n        "bonded_tokens": "0"\n    },\n    "params": {\n        "unbonding_time": "604800000000000",\n        "max_validators": 21,\n        "bond_denom": "BNB"\n    },\n    "validators": null,\n    "bonds": null\n}\n')),(0,i.kt)("p",null,"Let us break down the parameters:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"pool")),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"not_bonded_tokens"),": Defines the amount of tokens not bonded (i.e. delegated) in genesis. Generally, it equals the\ntotal supply of the staking token, it's shifted by 8 digits for representing decimals."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"bonded_tokens"),": Amount of bonded tokens in genesis. Generally ",(0,i.kt)("inlineCode",{parentName:"li"},"0"),"."))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"params")),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"unbonding_time"),": Time in ",(0,i.kt)("strong",{parentName:"li"},"nanosecond")," it takes for tokens to complete unbonding."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"max_validators"),": Maximum number of active validators."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"bond_denom"),": Denomination of the staking token."))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"validators"),": List of last known validators. Generally ",(0,i.kt)("inlineCode",{parentName:"p"},"null")," in genesis (except if genesis was generated using a\nprevious state).")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"bonds"),": List of last known delegation. Generally ",(0,i.kt)("inlineCode",{parentName:"p"},"null")," in genesis (except if genesis was generated using a previous\nstate)."))),(0,i.kt)("h4",{id:"governance"},"Governance"),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"gov")," module handles all governance-related transactions. The initial state of the ",(0,i.kt)("inlineCode",{parentName:"p"},"gov")," section looks like the\nfollowing:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-json"},'"gov": {\n    "starting_proposalID": "1",\n    "deposit_params": {\n        "min_deposit": [\n            {\n                "denom": "BNB",\n                "amount": "100000000000"\n            }\n        ],\n        "max_deposit_period": "172800000000000"\n    },\n    "tally_params": {\n        "quorum": "50000000",\n        "threshold": "50000000",\n        "veto": "33400000"\n    }\n}\n')),(0,i.kt)("p",null,"Let us break down the parameters:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"starting_proposal_id"),": This parameter defines the ID of the first proposal. Each proposal is identified by a unique\nID."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"deposit_params"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"min_deposit"),": The minimum deposit required for the proposal to enter ",(0,i.kt)("inlineCode",{parentName:"li"},"Voting Period"),"."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"max_deposit_period"),": The maximum period (in ",(0,i.kt)("strong",{parentName:"li"},"nanoseconds"),") after which it is not possible to deposit on the\nproposal anymore."))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"tally_params"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"quorum"),": Minimum percentage of bonded staking tokens that needs to vote for the result to be valid."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"threshold"),": Minimum percentage of votes that need to be ",(0,i.kt)("inlineCode",{parentName:"li"},"YES")," for the result to be valid."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"veto"),": Maximum percentage ",(0,i.kt)("inlineCode",{parentName:"li"},"NO_WITH_VETO")," votes for the result to be valid.")))),(0,i.kt)("h4",{id:"genesis-transactions"},"Genesis Transactions"),(0,i.kt)("p",null,"A ",(0,i.kt)("inlineCode",{parentName:"p"},"gentx")," is a transaction that bonds staking token present in the genesis file under ",(0,i.kt)("inlineCode",{parentName:"p"},"accounts")," to a validator,\nessentially creating a validator at genesis. The chain will start as soon as more than 2/3rds of the validators (\nweighted by voting power) that are the recipient of a valid ",(0,i.kt)("inlineCode",{parentName:"p"},"gentx")," come online after ",(0,i.kt)("inlineCode",{parentName:"p"},"genesis_time"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-json"},'  "gentxs": [\n      {\n        "type": "auth/StdTx",\n        "value": {\n          "msg": [\n            {\n              "type": "cosmos-sdk/MsgCreateValidatorProposal",\n              "value": {\n                "MsgCreateValidator": {\n                  "Description": {\n                    "moniker": "Aconcagua",\n                    "identity": "",\n                    "website": "",\n                    "details": ""\n                  },\n                  "Commission": {\n                    "rate": "0",\n                    "max_rate": "0",\n                    "max_change_rate": "0"\n                  },\n                  "delegator_address": "bnb1y888axmhzz6yjj464syfy68mkhzy9phlv8fzac",\n                  "validator_address": "bva1kdx4xkktr35j2mpxncvtsshswj5gq577m9l0c3",\n                  "pubkey": {\n                    "type": "tendermint/PubKeyEd25519",\n                    "value": "Xj/NowvRnUXEtzaI2jXn2h/OfGhZssHyDtUgLSQUTj4="\n                  },\n                  "delegation": {\n                    "denom": "BNB",\n                    "amount": "1000000000000"\n                  }\n                },\n                "proposal_id": "0"\n              }\n            }\n          ],\n          "signatures": [\n            {\n              "pub_key": {\n                "type": "tendermint/PubKeySecp256k1",\n                "value": "AoeLfC96urAqZtAxg7cCSXh/+tRxGMthLbvXFu/w9nO0"\n              },\n              "signature": "b0wYwS7fJcpg0TerEoH22T1CqcZMc3NHm0BusK/+LPMPtqHQuOkbIlPUM12r1iXJjKZhPM/ItFveKIo1oFtfUg==",\n              "account_number": "0",\n              "sequence": "0"\n            },\n            {\n              "pub_key": {\n                "type": "tendermint/PubKeySecp256k1",\n                "value": "AreZUwAj6OlZI+xHZm66K4Nj5G/eNei768x77fdFz1fc"\n              },\n              "signature": "GefEmRyOFk5jGpIZnaGNAOubzPn+wedg62mf8m8yV5cWK7+SByBCcCTHQ+7kB+mkMjOR1AIuXC7Xfou5Q/QhgQ==",\n              "account_number": "0",\n              "sequence": "0"\n            }\n          ],\n          "memo": "",\n          "source": "0",\n          "data": null\n        }\n      }\n    ]\n')),(0,i.kt)("p",null,"A ",(0,i.kt)("inlineCode",{parentName:"p"},"gentx")," is just a signed message that validator signed to agree to be validators. Let us break down the parameters:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Signature related info",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"pub_key"),": pubkey is used for verifying signature"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"signature"),": the signature from validator"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"account_number"),": Unique identifier for the account. It is generated the first time a transaction including this\naccount is included in a block. In gentx, they are all 0"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"sequence"),": This number is used to count the number of transactions sent by this account. It is incremented each\ntime a transaction is included in a block, and used to prevent replay attacks. Initial value is 0."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"memo"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"source")," and ",(0,i.kt)("inlineCode",{parentName:"li"},"data")," are all customized details regarding this transaction"))),(0,i.kt)("li",{parentName:"ul"},"Delegation related info",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"moniker"),": the name of validator"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"delegator_address"),": this is the address that is listed in ",(0,i.kt)("inlineCode",{parentName:"li"},"app_state")," section"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"validator_address"),": this is the validator pubkey in ",(0,i.kt)("inlineCode",{parentName:"li"},"bech32")," encoding with prefix of ",(0,i.kt)("inlineCode",{parentName:"li"},"bva")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"delegation"),": this is the delegation amount. It's shifted by 8 digits for representing decimals.")))),(0,i.kt)("h2",{id:"how-to-generate-geneis-file"},"How to Generate Geneis File"),(0,i.kt)("p",null,"You can generate a default genesis file for your own testnet by running the following command:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"bnbchaind init --chain-id\n")),(0,i.kt)("p",null,"The genesis file will be stored in ",(0,i.kt)("inlineCode",{parentName:"p"},"~/.bnbchaind/config/genesis.json"),"."))}u.isMDXComponent=!0}}]);